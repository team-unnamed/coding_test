"""

테트로미노의 경우를 list에 모두 저장해두고 모든 좌표에 테트로미노를 놓아본다.
그 후, 최댓값을 구하면 최종 답이 됨.

"""
import sys

input = sys.stdin.readline

# 도형의 좌표 저장 (x, y)형태
tetromino = [
    [[0, 0], [1, 0], [2, 0], [3, 0]],  # ㅡ
    [[0, 0], [0, 1], [0, 2], [0, 3]],  # ㅣ
    [[0, 0], [1, 0], [1, 1], [0, 1]],  # ㅁ
    [[0, 0], [0, 1], [0, 2], [1, 2]],  # ㄴ
    [[0, 0], [1, 0], [2, 0], [0, 1]],  # ㄴ 회전
    [[0, 0], [1, 0], [1, 1], [1, 2]],  # ㄴ 회전2
    [[0, 0], [1, 0], [2, 0], [2, -1]],  # ㄴ 회전3
    [[0, 0], [1, -2], [1, -1], [1, 0]],  # ㄴ2
    [[0, 0], [0, 1], [1, 1], [2, 1]],  # ㄴ2 회전2
    [[0, 0], [1, 0], [0, 1], [0, 2]],  # ㄴ2 회전3
    [[0, 0], [1, 0], [2, 0], [2, 1]],  # ㄴ2 회전4
    [[0, 0], [0, 1], [1, 1], [1, 2]],  # ㄹ
    [[0, 0], [1, 0], [1, -1], [2, -1]],  # ㄹ 회전
    [[0, 0], [0, 1], [-1, 1], [-1, 2]],  # ㄹ2
    [[0, 0], [1, 0], [1, 1], [2, 1]],  # ㄹ2 회전2
    [[0, 0], [1, 0], [1, 1], [2, 0]],  # ㅜ
    [[0, 0], [1, -1], [1, 0], [1, 1]],  # ㅓ
    [[0, 0], [1, 0], [1, -1], [2, 0]],  # ㅗ
    [[0, 0], [0, 1], [1, 1], [0, 2]],  # ㅏ
]

N, M = map(int, input().rstrip("\n").split(" "))
paper = []

global result
result = 0  # 테트로미노를 놓인 칸에 쓰인 합의 최댓값

for _ in range(N):
    paper.append(list(map(int, input().rstrip("\n").split(" "))))


def dfs(x, y):
    global result

    for tetro in tetromino:
        score = 0
        for dx, dy in tetro:
            nx = x + dx
            ny = y + dy
            if (0 <= nx) and (nx < M) and (0 <= ny) and (ny < N):
                score += paper[ny][nx]

        result = score if result < score else result


for y in range(N):
    for x in range(M):
        dfs(x, y)

print(result)
